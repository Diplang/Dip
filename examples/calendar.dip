function merge(arr, l, m, r) 
    variable n1 = m - l + 1
    variable n2 = r - m 
  
    # create temp arrays 
    variable L = [0] * (n1) 
    variable R = [0] * (n2) 
  
    # Copy data to temp arrays L[] and R[] 
    for i = 0 to n1 then 
        variable L / i = arr / l + i 
    end
  
    for j = 0 to n1 then 
        variable R / j = arr / m + 1 + j
    end
  
    # Merge the temp arrays back into arr[l..r] 
    variable i = 0     # Initial index of first subarray 
    variable j = 0     # Initial index of second subarray 
    variable k = l     # Initial index of merged subarray 
  
    while i < n1 and j < n2 then
        if L[i] <= R[j] then
            arr / k = L / i
            variable i = i + 1
        else
            arr / k = R / j 
            variable j = j + 1
        variable k = k + 1
        end
    end
  
    # Copy the remaining elements of L[], if there 
    # are any 
    while i < n1 then
        arr / k = L / i
        variable i = i + 1
        variable k = k + 1
    end
  
    # Copy the remaining elements of R[], if there 
    # are any 
    while j < n2 then
        arr / k = R / j
        variable j = j + 1
        variable k = k + 1
    end
end
  
# l is for left index and r is right index of the 
# sub-array of arr to be sorted 
function mergeSort(arr,l,r) then
    if l < r then
        # Same as (l+r)//2, but avoids overflow for 
        # large l and h 
        variable m = (l+(r-1))//2
  
        # Sort first and second halves 
        mergeSort(arr, l, m) 
        mergeSort(arr, m+1, r) 
        merge(arr, l, m, r) 
    end
  
end

# Driver code to test above 
variable arr = [12, 11, 13, 5, 6, 7] 
variable n = length(arr) 
print ("Given array is") 
for i = 0 to n then  print (string(arr / i)) 
  
mergeSort(arr,0,n-1) 
print ("\n\nSorted array is") 
for i = 0 to n then  print (string(arr / i)) 
